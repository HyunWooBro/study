

// ===============================
// 패키지 추가 방식
// ===============================

// 크게 3가지 방식이 있다.
// 1. SPM(Swift Package Manager)
// 2. Cocoapods
// 3. 로컬



// ===============================
// Static vs. Dynamic
// ===============================



// ===============================
// 패키지 Demo/Example 실행시 주의사항
// ===============================

// 1. Project 보다는 Worksapce 를 통해 오픈해야 함 (No such module XXX 등의 오류가 발생하는 경우)
// 출처: https://stackoverflow.com/questions/29500227/getting-error-no-such-module-using-xcode-but-the-framework-is-there
// 특히, Pods 사용하는 경우에는 필수
// 출처: https://stackoverflow.com/questions/73144869/xcode-workspace-builds-but-not-project

// 2. Pods 업데이트가 필요할 수 있음 (프로젝트 네비게이터의 Pods 가 빨간색으로 표시되는 경우)
// pod install

// 3. Swift 버전 충돌로 인한 프로젝트 설정 변경이 필요할 수 있음
// Targets > General > Minimum Deployments 또는 Deplyment Info > iOS 버전 변경



// ===============================
// SPM 패키지 업데이트
// ===============================

// 프로젝트 네비게이터의 하단에 있는 Package Dependencies 항목에는 SPM 으로 추가한 패키지가 보관된다.

// [모든 패키지 업데이트]
// Package Dependencies 항목의 컨텍스트 메뉴에서 Update to Latest Package Versions 를 선택하면 Dependency Rule 을 Exact Version 으로 설정된 패키지를 제외한 모든 패키지의 버전이 룰을 기준으로 업데이트 된다.

// [단일 패키지 업데이트]
// 업데이트 할 패키지의 컨텍스트 메뉴에서 Update Package 를 선택 (단, Dependency Rule 을 Exact Version 으로 설정된 패키지는 변화 없음)

// [Exact Version 패키지 업데이트]
// 프로젝트 설정의 Package Dependencies 에서 직접 원하는 버전으로 변경



// ===============================
// 외부 패키지 사용시 주의점
// ===============================

// 기본적으로 Swift 및 iOS API 를 정확히 파악하고 사용해야 하는 것처럼, 편의를 위해 추가한 외부 패키지라 하더라도 내부 작동 원리를 알아야 제대로 활용할 수 있다. 아무리 훌륭한 패키지라고 하더라도 내부 원리에 반하게 사용하면 효율이 감소하거나 제대로 동작하지 않기 때문이다. 따라서 패키지에서 제공하는 문서와 샘플은 물론 필요하다면 오픈된 소스까지도 자세히 살펴볼 필요가 있다.

// 외부 라이브러리에 의존하면 추후에 지원종료, 의존성에 의한 리팩토링의 어려움 등의 이슈가 있을 수 있다. 개인적으로는 많은 기여자들에 의해 개발되고 많은 사용자들에 의해 검증되며 오랜 노하우가 집약된 공개 라이브러리를 단순히 사용하는 것을 넘어 내부 구조를 연구하면서 이해할 수 있는 기회를 살릴 수 있다면 얻는 것이 많다고 생각한다. 일반적으로 외부 인프라에 의존할 때 문제가 되는 경우는 주도권을 내주고 컨트롤이 불가능한 상황일 경우인데, 여기서 다루는 외부 라이브러리는 오픈소스이기 때문에 컨트롤이 불가능한 상황이 아니기 때문이다.

// 결국 이미 존재하는 기능을 다시 만들 필요는 없다.
